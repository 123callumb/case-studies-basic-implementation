<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Services</name>
    </assembly>
    <members>
        <member name="M:Services.Filters.GlobalActionFilter.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            This method is called everytime a controller action is called. It ensures that the user in the current session has access to the action. 
            </summary>
            <param name="context">Current HttpContext</param>
            <param name="next">The intended action method.</param>
            <returns></returns>
        </member>
        <member name="T:Services.GenericRepository.IGenericQuerier">
            <summary>
             This is a generic query manager that subtracts the need
             for entity repositories.
             </summary>
        </member>
        <member name="M:Services.GenericRepository.IGenericQuerier.Load``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Load a dbset entity and map it into a dto with an optional where statement.</summary>
            <typeparam name="Entity">Must be of type that belongs to the entities generated by the entity framework scaffold</typeparam>
            <typeparam name="EntityDTO">Must be the mapping object that is no an object of the dbsets.</typeparam>
            <param name="select">The map statement.</param>
            <param name="where">Optional where statement.</param>
            <returns>Returns an IQueryable of the entity which is executed once an async method is called on it. E.g. ToListAsync()</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericQuerier.LoadEntity``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Directly loads an entity from the database and keeps its references. If an entity from this result is altered and save changes is called it will be modified on the database end too.
            Used for grabbing entities for deletion and updating.
            </summary>
            <typeparam name="Entity">Must be of type that belongs to the entities generated by the entity framework scaffold</typeparam>
            <param name="where">That satisfy a specific predicate. If this is no required user <see cref="M:Services.GenericRepository.IGenericQuerier.LoadDbSet``1" /></param>
            <returns>Returns an entity with links to the dbset.</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericQuerier.LoadDbSet``1">
            <summary>
            Load db set from the db. Not suitable for loading large amounts of data as it keeps it's reference. 
             Use with caution. Entity mappings should be done with <see cref="M:Services.GenericRepository.IGenericQuerier.Load``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/> when loading large dataset that do not need to be edited. 
            </summary> 
             <typeparam name="TEntity">Must be of type that belongs to the entities generated by the entity framework scaffold</typeparam>
             <returns>Db set from the data base of type.</returns>
        </member>
        <member name="T:Services.GenericRepository.IGenericRepo">
            <summary>
            This is a generic repository that subtracts the need for entity repositories.
            </summary>
        </member>
        <member name="M:Services.GenericRepository.IGenericRepo.Add``1(``0)">
            <summary>
            Add a row to the database.
            </summary>
            <typeparam name="Entity">Must be of type that belongs the entites generated by entity frameworks scaffold/</typeparam>
            <returns>An integer for how many rows in the db have been affected.</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericRepo.AddRange``1(System.Collections.Generic.List{``0})">
            <summary>
            Add a multiple rows to the database.
            </summary>
            <typeparam name="Entity">Must be of type that belongs the entites generated by entity frameworks scaffold/</typeparam>
            <returns>An integer for how many rows in the db have been affected.</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericRepo.RemoveRange``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove rows from the database.
            </summary>
            <typeparam name="Entity">Must be of type that belongs the entites generated by entity frameworks scaffold/</typeparam>
            <returns>An integer for how many rows in the db have been affected.</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericRepo.Remove``1(``0)">
            <summary>
            Remove a row from the database.
            </summary>
            <typeparam name="Entity">Must be of type that belongs the entites generated by entity frameworks scaffold/</typeparam>
            <returns>An integer for how many rows in the db have been affected.</returns>
        </member>
        <member name="M:Services.GenericRepository.IGenericRepo.SaveChanges">
            <summary>
            Used after editing dbset entities.
            </summary>
            <returns>An integer for how many rows in the db have been affected.</returns>
        </member>
    </members>
</doc>
